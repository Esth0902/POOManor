
@using testManor.Pages
@using testManor.Pages.Services
@inject NavigationManager Nav
@inject HeroService HeroService
@inject CombatService CombatService 

<!-- Affichage des stats du héro, mise à jour via HeroService -->

<div class="gestionvie">
    <p><img src="@HeroService.MonHero.Image" class="Personnage" alt=""/> &nbsp; &nbsp; &nbsp; &nbsp; Nom : @HeroService.MonHero.Nom &nbsp; &nbsp; &nbsp; &nbsp;Point de vie : @HeroService.MonHero.Life  &nbsp; &nbsp; &nbsp; &nbsp;Point de dégat : @HeroService.MonHero.Damage &nbsp; &nbsp; &nbsp; &nbsp;Point de défense : @HeroService.MonHero.Armor    </p>
</div>

<!-- pour chaque cellule du tableau, vérifie la présence d'un monstre, d'un coffre, du héro, d'un escalier, ... et l'affiche -->

<div @ref="mapElement" @onkeydown="HandleKeyDown" tabindex="0" class="@CurrentMap" style="background-image: url('@CurrentFloorImage')">
    @for (int row = 0; row < Row; row++)
    {
        @for (int col = 0; col < Column; col++)
        {
    <div class="cell">
        @if (MonstersList != null && MonstersList.Any(m => m.PositionX == col && m.PositionY == row && m.Alive())) //cherche un monstre vivant présent dans la cellule
        {
            var monster = MonstersList.First(m => m.PositionX == col && m.PositionY == row && m.Alive()); //récupère le premier monstre vivant trouvé dans la cellule
        //en vérifiant que la position x/y du monstre correspondent à la position de la cellule et que le monstre est vivant.
            <img src="@monster.Image" alt="@monster.Name" class="monster" /> //si monstre vivant trouvé dans la cellule, affiche son image
        }
        else if (Coffres != null && Coffres.Any(c => c.PositionX == col && c.PositionY == row && !c.Ouvert)) //affichage du coffre s'il n'est pas ouvert
        {
            var coffre = Coffres.First(c => c.PositionX == col && c.PositionY == row && !c.Ouvert);
            <img src="@coffre.Image" class="coffreimage" alt=""/>
        }
        else if (Coffres != null && Coffres.Any(c => c.PositionX == col && c.PositionY == row && c.Ouvert)) //affichage du coffre s'il a été ouvert
        {
            var coffre = Coffres.First(c => c.PositionX == col && c.PositionY == row && c.Ouvert);
            <img src="@coffre.ImageOuvert" class="coffreimage" alt=""/>
        }
        else if (row == PlayerPositionY && col == PlayerPositionX) //affichage du héro
        {
            <img src="@HeroService.MonHero.Image" class="hero" alt=""/>
        }
        else if (Stairs != null && Stairs.Any(s => s.PositionX == col && s.PositionY == row)) //affichage des escaliers
        {
            <img src="images/stairs1.png" class="StairsImage" alt=""/>
        }
        else if (Exits != null && Exits.Any(s => s.PositionX == col && s.PositionY == row)) //affichage des sorties
        {
            var exit = Exits.First(s => s.PositionX == col && s.PositionY == row); 
            <img src="@exit.Image" class="StairsImage" alt=""/>
        }
        else if (Etang != null && row == Etang.PositionY && col == Etang.PositionX) // affichage de l'étang
        {
            <img src="@Etang.Image" class="EtangImage" alt=""/>
        }
        
        else if (Caisse != null && Caisse.Any(c => c.PositionX == col && c.PositionY == row)) // affichage des caisses
        {
        var caisse = Caisse.First(c => c.PositionX == col && c.PositionY == row);
        {
            <img src="@caisse.Image" class="coffreimage" alt=""/>
        } 
        }
            
    </div>
    
    }
    }
</div>

<div class="prompt"> <!-- affichage du texte dans la fenêtre sous la map -->
    @if (!string.IsNullOrEmpty(TresorTexte))
    {
    <p>@TresorTexte</p>
    }
</div>

@code {
// liste de paramètres nécessaires à la création d'une nouvelle map

    [Parameter] public string? CurrentFloorImage { get; set; }
    [Parameter] public string? StockMap { get; set; }
    [Parameter] public string? CurrentMap { get; set; }
    [Parameter] public int Row { get; set; }
    [Parameter] public int Column { get; set; }
    [Parameter] public List<Monsters>? MonstersList { get; set; }
    [Parameter] public List<Zone>? Zones { get; set; } // initialisation de la liste des zones
    [Parameter] public List<Door>? Doors { get; set; } // initialisation de la liste des portes
    [Parameter] public List<Stair>? Stairs { get; set; } // initialisation de la liste des escaliers
    [Parameter] public List<Exit>? Exits { get; set; }
    [Parameter] public int Etage { get; set; }
    [Parameter] public int PlayerPositionX { get; set; } // position initiale du héros
    [Parameter] public int PlayerPositionY { get; set; } // position initiale du héros
    [Parameter] public int CoffrePositionX { get; set; }
    [Parameter] public int CoffrePositionY { get; set; }
    [Parameter] public etang? Etang { get; set; }
    [Parameter] public List<caisse>? Caisse { get; set; }
    [Parameter] public List<Coffre>? Coffres { get; set; } = new List<Coffre>();
    
    public bool TresorTrouve { get; set; } = false; // Indique si le trésor a été trouvé
    private string? TresorImage { get; set; } // Image aléatoire du trésor
    private string? TresorTexte { get; set; } // Texte du trésor
    private fight? CurrentFight; //méthode de combat

    private void HandleKeyDown(KeyboardEventArgs e) // Méthode pour gérer l'évènement clavier et le déplacement du héro
    {
        int newPlayerRow = PlayerPositionY, newPlayerCol = PlayerPositionX;
        {
            switch (e.Key)
            {
                case "ArrowUp":
                    newPlayerRow = PlayerPositionY - 1; // touche du haut, modifie la positionY du héro
                    break;
                case "ArrowDown":
                    newPlayerRow = PlayerPositionY + 1; // touche du bas
                    break;
                case "ArrowLeft":
                    newPlayerCol = PlayerPositionX - 1; // touche de gauche, modifie la positionX du héro
                    break;
                case "ArrowRight":
                    newPlayerCol = PlayerPositionX + 1; // touche de droite
                    break;
            }
        }

        if (CanMoveTo(PlayerPositionY, PlayerPositionX, newPlayerRow, newPlayerCol)) //vérifie si le joueur peut se déplacer au nouvel emplacement
        {
            PlayerPositionY = newPlayerRow;
            PlayerPositionX = newPlayerCol;
        }
        
        var coffre = Coffres.FirstOrDefault(c => c.PositionX == PlayerPositionX && c.PositionY == PlayerPositionY && !c.Ouvert);
        if (coffre != null)
        {
            coffre.Ouvert = true;
            SelectRandomTreasure();
        }

        var navigationMap = new Dictionary<(int etage, int X, int Y), string>
        {
            { (11, 9, 5), "Map1E" }, //clefs de navigation vers les différentes pièces (positions des escaliers et destination)
            { (1, 9, 5), "MapRDC" },
            { (1, 0, 0), "MapGrenier" },
            { (2, 0, 0), "Map1E" },
            { (11, 19, 9), "Mapjardin" },
            { (12, 9, 0), "MapRDC" },
            { (12, 19, 4), "Fin" }
        };

        if (navigationMap.TryGetValue((Etage, PlayerPositionX, PlayerPositionY), out var destination))
        {
            StockMap = destination;
            if (objetsNecessairesParMap.TryGetValue(destination, out var mapInfo))
            {
             
                if (!ObjetsRequis(mapInfo.ObjetsNecessaires))
                {
                
                    var objetsManquants = mapInfo.ObjetsNecessaires
                        .Where(item => !HeroService.ListInventaire.Contains(item))
                        .ToList();
                    
                    TresorTexte = mapInfo.TresorTexte;
                    
                    return;
                }
            }

            if (destination == "Fin")
            {
                HeroService.StopMoving = true;
            }

            Nav.NavigateTo(destination); 
        }


        if (MonstersList.Any(m => m.PositionX == PlayerPositionX && m.PositionY == PlayerPositionY && m.Alive()))
        {
            var monster = MonstersList.First(m => m.PositionX == PlayerPositionX && m.PositionY == PlayerPositionY && m.Alive());
            HeroService.StopMoving = true;
            CombatService.CurrentMonster = monster; // Stocker le monstre dans le service
            CombatService.CurrentMap = StockMap; // Stocker la carte actuelle dans le service
            Nav.NavigateTo("/MapCombat"); // Naviguer vers la carte de combat
        }
        else if (CombatService.CurrentMonster != null && CombatService.CurrentMonster.Life <= 0)
        {
            MonstersList.Remove(CombatService.CurrentMonster);
            CombatService.CurrentMonster = null;
        }

        var caisse = Caisse.FirstOrDefault(c => c.PositionX == PlayerPositionX && c.PositionY == PlayerPositionY);
        if(caisse !=null)
        {
            if (!HeroService.ListInventaire.Contains(caisse.Item.Image))
            {
                HeroService.AddNotif(caisse.Item.Image);
                TresorTexte = $"Vous avez trouvé {caisse.Item.Nom} !";
            }
        }

        if (Etang != null && PlayerPositionX == Etang.PositionX && PlayerPositionY == Etang.PositionY)
        {
            var clef = new Item("la clef de sortie", "images/clefjardin.png");
            if (!HeroService.ListInventaire.Contains("images/epuisette.png"))
            {
                TresorTexte = "Quelque chose brille au fond de l'étang ...";
            }
            else if (!HeroService.ListInventaire.Contains(clef.Image) && HeroService.ListInventaire.Contains("images/epuisette.png"))
            {
                HeroService.AddNotif(clef.Image);
                TresorTexte = $"Vous avez trouvé {clef.Nom} !";
            }
        }


        StateHasChanged(); // Rafraîchit la map après chaque déplacement
    }

    private void SelectRandomTreasure()
    {
        Coffre monCoffre = new Coffre(0,0);
        var objetAleatoire = monCoffre.ChoisirObjet();

        if (objetAleatoire is Armure armure)
        {
            if (!HeroService.ListInventaire.Contains(armure.Image))  HeroService.AddNotif(armure.Image) ;
            TresorTexte = $"Vous avez trouvé {armure.Nom} qui vous procure {armure.PointDefense} point(s) de défense supplémentaire !";
            HeroService.MonHero.Armor += armure.PointDefense;

        }
        else if (objetAleatoire is Arme arme)
        {
            if (!HeroService.ListInventaire.Contains(arme.Image))  HeroService.AddNotif(arme.Image);
            TresorTexte = $"Vous avez trouvé {arme.Nom} qui vous procure {arme.Pointdegats} point(s) de dégats supplémentaire !";
            HeroService.MonHero.Damage += arme.Pointdegats;
        }
        else if (objetAleatoire is Potion potions)
        {
            if (!HeroService.ListInventaire.Contains(potions.Image)) HeroService.AddNotif(potions.Image);
            TresorTexte = $"Vous avez trouvé {potions.Nom} qui vous procure {potions.Pointdevie} point(s) de vie supplémentaire !";
            HeroService.MonHero.Life += potions.Pointdevie;
        }
    }

    public async Task MoveMonsters()
    {
        var random = new Random();
        while (!HeroService.StopMoving)
        {
            if (MonstersList != null)
                foreach (var monster in MonstersList)
                {
                    int direction = random.Next(4); // random entre 0 et 3
                    int newRow = monster.PositionY, newCol = monster.PositionX; //stocke la position initiale du monstre

                    switch (direction)
                    {
                        case 0:
                            newRow = monster.PositionY - 1; //modifie la position stockée
                            break; // Haut
                        case 1:
                            newRow = monster.PositionY + 1;
                            break; // Bas
                        case 2:
                            newCol = monster.PositionX - 1;
                            break; // Gauche
                        case 3:
                            newCol = monster.PositionX + 1;
                            break; // Droite
                    }

                    if (CanMoveTo(monster.PositionY, monster.PositionX, newRow, newCol))
                    {
                        monster.PositionY = newRow; //redéfini la position initiale sur base de la position stockée
                        monster.PositionX = newCol;
                    }

                    if (monster.PositionX == PlayerPositionX && monster.PositionY == PlayerPositionY && monster.Alive())
                    {
                        CurrentFight = new fight(HeroService.MonHero, monster);
                        if (CurrentFight.GameOver)
                        {
                            Nav.NavigateTo("MapGameOver");
                        }

                        TresorTexte = CurrentFight.text;
                    }
                }

            StateHasChanged();
            await Task.Delay(500); // délai de 5 secondes entre les déplacements
        }
    }

    private ElementReference mapElement; // Référence à l'élément de la carte

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mapElement.FocusAsync();
            await MoveMonsters();
        }
    }

    public bool CanMoveTo(int currentRow, int currentCol, int targetRow, int targetCol) // Vérifie si le déplacement est effectué dans la même zone ou via une porte
    {
        // Recherche dans la liste des zones le premier élément qui répond à la condition, sinon renvoie null
        // la méthode IsInside est créée dans la classe zone 
        
        var currentZone = Zones.FirstOrDefault(z => z.IsInside(currentRow, currentCol));
        
        // Vérifie la zone de déplacement
        
        var targetZone = Zones.FirstOrDefault(z => z.IsInside(targetRow, targetCol));
        
        // si la zone actuelle est égale à la zone de déplacement, renvoie vrai
        if (currentZone == targetZone)
            return true;

        // Vérifie si le déplacement passe par une porte
        return Doors.Any(d =>
            (d.Position1 == (currentRow, currentCol) && d.Position2 == (targetRow, targetCol)) ||
            (d.Position2 == (currentRow, currentCol) && d.Position1 == (targetRow, targetCol)));
    }

    private bool ObjetsRequis(List<string> objetsRequis) // vérifie si l'inventaire contient les objets requis pour le passage vers une autre pièce
    {
        foreach (var item in objetsRequis)
        {
            if (!HeroService.ListInventaire.Contains(item))
            {
                return false;
            }
        }

        return true;
    }

    public class MapInfo
    {
        public List<string> ObjetsNecessaires { get; set; }
        public string TresorTexte { get; set; }

        public MapInfo(List<string> objetsNecessaires, string tresorTexte)
        {
            ObjetsNecessaires = objetsNecessaires;
            TresorTexte = tresorTexte;
        }
    }

    private readonly Dictionary<string, MapInfo> objetsNecessairesParMap = new() // dictionnaire contenant la liste des objets nécessaires selon les pièces
    {
        {
            "MapGrenier", new MapInfo(
                new List<string> { "images/planche.png", "images/vis.png", "images/visseuse.png" },"Les escaliers sont cassés, trouvez une planche, des vis et une visseuse")},
        {
            "Mapjardin", new MapInfo(
                new List<string> { "images/clefgrenier.png" },"La porte est fermée, il vous faut la clef")},
        {
            "Fin", new MapInfo(
                new List<string> { "images/clefjardin.png" },"Vous y êtes presque mais la porte est fermée, il vous faut la clef")},
        };

    }

}
