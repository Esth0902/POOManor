
@using testManor.Pages
@using testManor.Pages.Services
@inject NavigationManager nav
@inject HeroService HeroService

<div class="gestionvie">
    <p><img src="@HeroService.MonHero.Image" class="Personnage" /> &nbsp; &nbsp; &nbsp; &nbsp; Nom : @HeroService.MonHero.Nom &nbsp; &nbsp; &nbsp; &nbsp;Point de vie : @HeroService.MonHero.Life  &nbsp; &nbsp; &nbsp; &nbsp;Point de dégat : @HeroService.MonHero.Damage &nbsp; &nbsp; &nbsp; &nbsp;Point de défense : @HeroService.MonHero.Armor    </p>
</div>

<div @ref="mapElement" @onkeydown="HandleKeyDown" tabindex="0" class="@CurrentMap" style="background-image: url('@CurrentFloorImage')">
    @for (int row = 0; row < Row; row++)
    {
        @for (int col = 0; col < Column; col++)
        {
    <div class="cell">
        @if (MonstersList.Any(m => m.PositionX == col && m.PositionY == row && m.Alive())) //cherche un monstre vivant présent dans la cellule
        {
        var monster = MonstersList.First(m => m.PositionX == col && m.PositionY == row && m.Alive()); //récupère le premier monstre vivant trouvé dans la cellule
        //en vérifiant que la position x/y du monstre correspondent à la position de la cellule et que le monstre est vivant.
        <img src="@monster.Image" alt="@monster.Name" class="monster" /> //si monstre vivant trouvé dans la cellule, affiche son image
        }
        else if (row == CoffrePositionY && col == CoffrePositionX && !TresorTrouve)
        {
            <img src="images/coffre.png" class="coffreimage"/>
        }
        else if (TresorTrouve && row == CoffrePositionY && col == CoffrePositionX) // Affiche coffre ouvert si le trésor est trouvé
        {
        <img src="images/coffreouvert.png" class="coffreimage" />
        }
        else if (row == PlayerPositionY && col == PlayerPositionX) 
        {
        <img src="@HeroService.MonHero.Image" class="hero"/>
        }
        else if (Stairs != null && Stairs.Any(s => s.PositionX == col && s.PositionY == row)) //cherche un escalier dans la cellule
        {
        <img src="images/stairs1.png" class="StairsImage"/>
        }
        else if (Exits != null && Exits.Any(s => s.PositionX == col && s.PositionY == row)) //cherche un escalier dans la cellule
        {
        <img src="images/Exit.png" class="StairsImage"/>
        }
    </div>
    
    }
    }
</div>

<div class="prompt">
    @if (TresorTrouve)
    {
    <p>@TresorTexte</p>
    }
</div>

@code {
    
[Parameter]
    public string CurrentFloorImage { get; set; }
[Parameter]
    public string CurrentMap { get; set; }
[Parameter]
    public int Row { get; set; }
[Parameter]
    public int Column { get; set; }
[Parameter]
    public List<Monsters> MonstersList { get; set; }
[Parameter]
    public List<Zone> Zones { get; set; } // initialisation de la liste des zones
[Parameter]
    public List<Door> Doors { get; set; } // initialisation de la liste des portes
[Parameter]
    public List<Stair>? Stairs { get; set; } // initialisation de la liste des escaliers
[Parameter]
    public List<Exit>? Exits { get; set; }
[Parameter]
    public int Etage { get; set; }
[Parameter]
    public int PlayerPositionX { get; set; }// position initiale du héros
[Parameter]
    public int PlayerPositionY { get; set; } // position initiale du héros
[Parameter] 
    public int CoffrePositionX { get; set; }
[Parameter]
    public int CoffrePositionY { get; set; }
    
//class création mapparameters = 1 paramètre qui serait les propriétés de chaque map  
public bool TresorTrouve { get; set; } = false; // Indique si le trésor a été trouvé
private string TresorImage { get; set; } // Image aléatoire du trésor
private string TresorTexte { get; set; } // Texte du trésor
public bool StopMoving { get; set; } = false; //stopmoving initialisé à "false"
private fight? CurrentFight;

private void HandleKeyDown(KeyboardEventArgs e) // Méthode pour gérer l'évènement clavier  
{
    int newPlayerRow = PlayerPositionY, newPlayerCol = PlayerPositionX;
    {
        switch (e.Key)
        {
            case "ArrowUp":
                newPlayerRow = PlayerPositionY - 1; // Haut
                //if (PlayerPositionY > 0) PlayerPositionY--;
                break;
            case "ArrowDown":
                newPlayerRow = PlayerPositionY + 1;
                //if (PlayerPositionY < 9) PlayerPositionY++;
                break;
            case "ArrowLeft":
                newPlayerCol = PlayerPositionX - 1;
                //if (PlayerPositionX > 0) PlayerPositionX--;
                break;
            case "ArrowRight":
                newPlayerCol = PlayerPositionX + 1;
                //if (PlayerPositionX < 19) PlayerPositionX++;
                break;
        }
    }

    if (CanMoveTo(PlayerPositionY, PlayerPositionX, newPlayerRow, newPlayerCol))
    {
        PlayerPositionY = newPlayerRow;
        PlayerPositionX = newPlayerCol;
    }

    if (PlayerPositionX == CoffrePositionX && PlayerPositionY == CoffrePositionY && !TresorTrouve)
    {
        TresorTrouve = true;
        SelectRandomTreasure();
    }
    if (Etage == 0 && PlayerPositionX == 9 && PlayerPositionY == 5)
    {
        nav.NavigateTo("Map1E");
    }
    if (Etage == 1 && PlayerPositionX == 9 && PlayerPositionY == 5)
    {
        nav.NavigateTo("MapRDC");
    }
    if (Etage == 1 && PlayerPositionX == 0 && PlayerPositionY == 0)
    {
        nav.NavigateTo("MapGrenier");
    }
    if (Etage == 2 && PlayerPositionX == 0 && PlayerPositionY == 0)
    {
        nav.NavigateTo("Map1E");
    }

    if (Etage == 0 && PlayerPositionX == 19 && PlayerPositionY == 9)
    {
        nav.NavigateTo("Mapjardin");
    }

    if (MonstersList.Any(m => m.PositionX == PlayerPositionX && m.PositionY == PlayerPositionY && m.Alive()))
    {
        var monster = MonstersList.First(m => m.PositionX == PlayerPositionX && m.PositionY == PlayerPositionY && m.Alive());
        CurrentFight = new fight(HeroService.MonHero, monster);
        CurrentFight.Start(); // Lancer le combat
        if (CurrentFight.IsFightOver)
        {
            StopMoving = false;
        }
    }

    StateHasChanged(); // Rafraîchit la map après chaque déplacement
}

private void SelectRandomTreasure()
{
    Coffre monCoffre = new Coffre();
    var objetAleatoire = monCoffre.ChoisirObjet();

    if (objetAleatoire is Armure armure)
    {
        if (!HeroService.ListInventaire.Contains(armure.Image))  HeroService.AddNotif(armure.Image) ;
        TresorTexte = $"Vous avez trouvé {armure.Nom} qui vous procure {armure.PointDefense} point(s) de défense supplémentaire !";
        HeroService.MonHero.Armor += armure.PointDefense;

    }
    else if (objetAleatoire is Arme arme)
    {
        if (!HeroService.ListInventaire.Contains(arme.Image))  HeroService.AddNotif(arme.Image);
        TresorTexte = $"Vous avez trouvé {arme.Nom} qui vous procure {arme.Pointdegats} point(s) de dégats supplémentaire !";
        HeroService.MonHero.Damage += arme.Pointdegats;
    }
    else if (objetAleatoire is Potion potions)
    {
        if (!HeroService.ListInventaire.Contains(potions.Image)) HeroService.AddNotif(potions.Image);
        TresorTexte = $"Vous avez trouvé {potions.Nom} qui vous procure {potions.Pointdevie} point(s) de vie supplémentaire !";
        HeroService.MonHero.Life += potions.Pointdevie;
    }
    else if (objetAleatoire is Item item)
    {
        if (!HeroService.ListInventaire.Contains(item.Image))  HeroService.AddNotif(item.Image);
        TresorTexte = $"Vous avez trouvé {item.Nom} !";
    }
 
}

public async Task MoveMonsters()
{
    var random = new Random();
    while (!StopMoving)
    {
        foreach (var monster in MonstersList)
        {
            int direction = random.Next(4);
            int newRow = monster.PositionY, newCol = monster.PositionX;

            switch (direction)
            {
                case 0: newRow = monster.PositionY - 1; break; // Haut
                case 1: newRow = monster.PositionY + 1; break; // Bas
                case 2: newCol = monster.PositionX - 1; break; // Gauche
                case 3: newCol = monster.PositionX + 1; break; // Droite
            }

            if (CanMoveTo(monster.PositionY, monster.PositionX, newRow, newCol))
            {
                monster.PositionY = newRow;
                monster.PositionX = newCol;
            }
            if (monster.PositionX == PlayerPositionX && monster.PositionY == PlayerPositionY)
            {
                nav.NavigateTo("MapCombat");
            }
        }

    StateHasChanged();
    await Task.Delay(2000);
    }
}
private ElementReference mapElement; // Référence à l'élément de la carte

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await mapElement.FocusAsync();
        await MoveMonsters();
    }
}



public bool CanMoveTo(int currentRow, int currentCol, int targetRow, int targetCol)
{
// Vérifier si le déplacement reste dans la même zone
    var currentZone = Zones.FirstOrDefault(z => z.IsInside(currentRow, currentCol));
//recherche dans la liste des zones le premier élément qui répond à la condition, sinon renvoie null
    var targetZone = Zones.FirstOrDefault(z => z.IsInside(targetRow, targetCol));

    if (currentZone == targetZone)
        return true;
    
    

// Vérifier si le déplacement passe par une porte
    return Doors.Any(d =>
    (d.Position1 == (currentRow, currentCol) && d.Position2 == (targetRow, targetCol)) ||
    (d.Position2 == (currentRow, currentCol) && d.Position1 == (targetRow, targetCol)));
}

}