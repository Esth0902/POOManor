@using testManor.Pages

<div class="gestionvie">
    <p><img src="images/HeroF.png" class="Personnage" />&nbsp; &nbsp; &nbsp; &nbsp;Point de vie :&nbsp; &nbsp; &nbsp; &nbsp;Point de dégat :&nbsp; &nbsp; &nbsp; &nbsp;Point de défense : </p>
</div>

<div @onkeydown="HandleKeyDown" tabindex="0" class="@CurrentMap" style="background-image: url('@CurrentFloorImage')">
    @for (int row = 0; row < Row; row++)
    {
        @for (int col = 0; col < Column; col++)
        {
    <div class="cell">
        @if (MonstersList.Any(m => m.PositionX == col && m.PositionY == row && m.Alive())) //cherche un monstre vivant présent dans la cellule
        {
        var monster = MonstersList.First(m => m.PositionX == col && m.PositionY == row && m.Alive()); //récupère le premier monstre vivant trouvé dans la cellule
        //en vérifiant que la position x/y du monstre correspondent à la position de la cellule et que le monstre est vivant.
        <img src="@monster.Image" alt="@monster.Name" class="monster" /> //si monstre vivant trouvé dans la cellule, affiche son image
        }
        else if (row == 3 && col == 5 && !TresorTrouve)
        {
            <img src="images/coffre.png" class="coffreimage"/>
        }
        else if (TresorTrouve && row == 3 && col == 5) // Affiche l'image aléatoire si le trésor est trouvé
        {
        <img src="@TresorImage" class="TresorImage" />
        }
        else if (row == PlayerPositionY && col == PlayerPositionX) 
        {
        <img src="images/HeroF.png" class="hero"/>
        }
    </div>
    
    }
    }
</div>

<div class="prompt">
    @if (TresorTrouve)
    {
    <p>@TresorTexte</p>
    }
</div>


@code {

[Parameter]
public string CurrentFloorImage { get; set; }
[Parameter]
public string CurrentMap { get; set; }
[Parameter]
public int Row { get; set; }
[Parameter]
public int Column { get; set; }
[Parameter]
public List<Monsters> MonstersList { get; set; }
[Parameter]
public List<Zone> Zones { get; set; } // initialisation de la liste des zones
[Parameter]
public List<Door> Doors { get; set; } // initialisation de la liste des portes
[Parameter] 
public int PlayerPositionX { get; set; }// position initiale du héros
[Parameter]
public int PlayerPositionY { get; set; } // position initiale du héros

private bool TresorTrouve { get; set; } = false; // Indique si le trésor a été trouvé
private string TresorImage { get; set; } // Image aléatoire du trésor
private string TresorTexte { get; set; } // Texte du trésor

public bool StopMoving { get; set; } = false; //stopmoving initialisé à "false"

private void HandleKeyDown(KeyboardEventArgs e) // Méthode pour gérer l'évènement clavier  
{
    switch (e.Key)
    {
        case "ArrowUp":
            if (PlayerPositionY > 0) PlayerPositionY--;
            break;
        case "ArrowDown":
            if (PlayerPositionY < 9) PlayerPositionY++;
            break;
        case "ArrowLeft":
            if (PlayerPositionX > 0) PlayerPositionX--;
            break;
        case "ArrowRight":
            if (PlayerPositionX < 19) PlayerPositionX++;
            break;
    }

    if (PlayerPositionX == 5 && PlayerPositionY == 3 && !TresorTrouve)
    {
        TresorTrouve = true;
        SelectRandomTreasure();
    }
    StateHasChanged(); // Rafraîchit la map après chaque déplacement
}

private void SelectRandomTreasure()
{
    Coffre monCoffre = new Coffre();
    var objetAleatoire = monCoffre.ChoisirObjet();

    if (objetAleatoire is Armures armure)
    {
        TresorImage = armure.Image;
        TresorTexte = $"Vous avez trouvé {armure.Nom} qui vous procure {armure.PointDefense} point(s) de défense supplémentaire !";
    }
    else if (objetAleatoire is Armes arme)
    {
        TresorImage = arme.Image;
        TresorTexte = $"Vous avez trouvé {arme.Nom} qui vous procure {arme.Pointdegats} point(s) de dégats supplémentaire !";

    }
    else if (objetAleatoire is Potions potions)
    {
        TresorImage = potions.Image;
        TresorTexte = $"Vous avez trouvé {potions.Nom} qui vous procure {potions.Pointdevie} point(s) de vie supplémentaire !";
    }
    else if (objetAleatoire is DiversItems diversItems)
    {
        TresorImage = diversItems.Image;
        TresorTexte = $"Vous avez trouvé {diversItems.Nom} !";
    }
}


public async Task MoveMonsters()
{
var random = new Random();

while (!StopMoving)
{
foreach (var monster in MonstersList)
{
int direction = random.Next(4);
int newRow = monster.PositionY, newCol = monster.PositionX;

switch (direction)
{
case 0: newRow = monster.PositionY - 1; break; // Haut
case 1: newRow = monster.PositionY + 1; break; // Bas
case 2: newCol = monster.PositionX - 1; break; // Gauche
case 3: newCol = monster.PositionX + 1; break; // Droite
}

if (CanMoveTo(monster.PositionY, monster.PositionX, newRow, newCol))
{
monster.PositionY = newRow;
monster.PositionX = newCol;
}
}

StateHasChanged();
await Task.Delay(2000);
}
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
await MoveMonsters();
}
}

public void StopMovement() //pour arrêter les déplacements des monstres
{
StopMoving = true;
}

public bool CanMoveTo(int currentRow, int currentCol, int targetRow, int targetCol)
{
// Vérifier si le déplacement reste dans la même zone
var currentZone = Zones.FirstOrDefault(z => z.IsInside(currentRow, currentCol));
//recherche dans la liste des zones le premier élément qui répond à la condition, sinon renvoie null
var targetZone = Zones.FirstOrDefault(z => z.IsInside(targetRow, targetCol));

if (currentZone == targetZone)
return true;

// Vérifier si le déplacement passe par une porte
return Doors.Any(d =>
(d.Position1 == (currentRow, currentCol) && d.Position2 == (targetRow, targetCol)) ||
(d.Position2 == (currentRow, currentCol) && d.Position1 == (targetRow, targetCol)));
}
}